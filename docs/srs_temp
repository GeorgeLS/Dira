The system will support the following:
- Accounts
- Two flavors: One simpler with more limited features (free) and a premium one (subscription)
- Register for one of the provided flavors
- Creation, modification, view and search of projects

The user will be able to do the following:
- Search for projects
- Ask access for public projects
- Invite other users to projects
- Join in private projects only via invite
- Create a project (limited number)

Premium features:
- Create private projects
- Unlimited number of projects

A project will support the following:
- Modify permissions for individual users (only those with ADMIN permission will be able to do that. By default, the creator of the project will be ADMIN. The creator cannot change the permission of themselves)
- Create, view and delete issues

An issue will support/have the following:
- Modify issue: Change any of the fields below.
- ID (autogenerated), Key (autogenerated based on project's name).
- Title
- Type:
	- Epic: An issue representing a high level idea of what we want to do/achieve as a whole with requirements. Usually an Epic is something that cannot be completed in a Sprint (a sprint is usually 2 weeks)
	- Story (feature): A story is an issue representing a fraction of the feature that we want to implement as part of an epic. This is basically a deliverable that can be developed and tested within the time of a sprint based on the requirements that were formed with the product owner
	- Bug: An issue that tracks a defect in the implementation of a feature that came up during the sprint or after being released
- Priority: Blocker, Major, Normal, Low
- Status:
	- New: An issue that was just created. We need to fill in details of the issue when we are on this status
	- Open: An issue that has all the details filled in and is ready to be analysed
	- Blocked: An issue that has been descoped and will be probably be prioritized in the future again
	- In Development: An issue that has been analysed and is currently being developed
	- To Test: An issue that has been developed and dev tested and is ready to be tested by a QA
	- Resolved
- Resolution
	- Unresolved: It has not been resolved yet
	- Done:  It has been successfully developed and tested
- Labels: A custom field that can be filled by the user in order to give a special meaning to the ticket (e.g part of specific functionality features)
- Description
- Comments
- Assignee
- Reporter
- Dates: Created, Updated, Due date
- Time tracking: Estimated, Remaining, Logged
- Fix version(s)
- Issue Links: Depends on, Relates to
- Epic link



## Backend


- REST Endpoints:
	- Project:
		- GET 		 /projects (retrieve all projects).
		- POST 		 /projects (create a new project, return a json with the new project info).
		
		- GET 		 /projects/{projectID or projectKey} (retrieve project with given project ID or given project Key).
		- POST		 /projects/{projectID or projectKey} (update a project with the given ID or project Key).
		- PUT		 /projects/{projectID or projectKey} (update a project with the given ID or project Key).
		- DELETE	 /projects/{projectID or projectKey} (delete a project with the given ID or project Key).	
		
		- GET		 /projects/{projectID or projectKey}/users (retrieve project's users).
		- POST		 /projects/{projectID or projectKey}/users (add a new user to project).
		- DELETE	 /projects/{projectID or projectKey}/users/{userID} (delete a user from the project).
		
		- GET		 /projects/{projectID or projectKey}/users/permissions (retrieve project's permissions for all users).
		- POST		 /projects/{projectID or projectKey}/users/permissions (create a new user permission for the user).
		- POST		 /projects/{projectID or projectKey}/users/permissions/{permissionID} (update permission with the given ID).
		- PUT		 /projects/{projectID or projectKey}/users/permissions/{permissionID} (update permission with the given ID).
		- DELETE     /projects/{projectID or projectKey}/users/permissions/{permissionID} (delete permission with the given ID).

	- Issues:
		- GET		/projects/{projectID or projectKey}/issues (retrieve all issues for the given project).
		- GET		/projects/{projectID or projectKey}/issues/{issueID or issueKey} (retrieve the issue with the given ID under the given project).
		- POST 		/projects/{projectID}/issues (create a new issue, return a json with the new issue info).
		- POST		/projects/{projectID or projectKey}/issues/{issueID or issueKey} (update an issue with the given ID or issue Key).
		- PUT		/projects/{projectID or projectKey}/issues/{issueID or issueKey} (update an issue with the given ID or issue Key).
		- DELETE	/projects/{projectID or projectKey}/issues/{issueID or issueKey} (delete an issue with the given ID or issue Key). 

	- Login:
		- POST		/login
	
	- Register:
		- POST		/register (register a new user)